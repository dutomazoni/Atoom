/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atoom;



//import static com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Type.INSERT;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.web.WebView;

import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Dudut
 */
public class atoomUI extends JFrame {

    /**
     * Creates new form atoomUI
     */
    
    String filePath = "";
    String podPath = "";
    String imgPath = "";
    String videoPath = "";
    String url = "";
    //File file = null;
    boolean isMarker = false;
    
    ImageIcon img;
    
    Clip clip = null;
    
    AudioInputStream audioInputStream = null;
    static int fullDuration = 0 ;
    static int curDuration = 0 ;
    String durLabel = "";
    public boolean isPlaying = false;
    int markerDuration = 0;
    int startPoint = 0;
 
    
    MediaPlayer player;
    
    JFXPanel javafxPanel;
    WebView webComponent;
    
    private static final String USERNAME = "root";
    private static final String PASSWORD = "2002";
    private static final String CONN_STRING = "jdbc:mysql://localhost:3306/atoom_test?useTimezone=true&serverTimezone=UTC";
    
    

    public atoomUI() throws ClassNotFoundException  {

        
        initComponents();
        javafxPanel = new JFXPanel();
        webPanel.setLayout(new BorderLayout());
        webPanel.add(javafxPanel, BorderLayout.CENTER);
        fileBrowser.setVisible(false);
        btImg.setVisible(false);
        fullDurationLabel.setVisible(false);
        curDurationLabel.setVisible(false);
        videoPanel.setVisible(false);
        
        //metodo para alterar a base de dados - TESTES APENAS
        //deleteFromDb(7);
        
        
        webPanel.setSize(450,450);
        
        //dbConnect(USERNAME,PASSWORD,CONN_STRING);
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btImg = new javax.swing.JButton();
        webPanel = new javax.swing.JPanel();
        videoPanel = new javax.swing.JPanel();
        btPlayVideo = new javax.swing.JButton();
        btPauseVideo = new javax.swing.JButton();
        btStopVideo = new javax.swing.JButton();
        btGoWeb = new javax.swing.JButton();
        urlField = new javax.swing.JTextField();
        btPlay = new javax.swing.JButton();
        btPause = new javax.swing.JButton();
        btStop = new javax.swing.JButton();
        btMarker = new javax.swing.JButton();
        fileBrowser = new javax.swing.JFileChooser();
        audioProgress = new javax.swing.JProgressBar();
        fullDurationLabel = new javax.swing.JLabel();
        curDurationLabel = new javax.swing.JLabel();
        durationField = new javax.swing.JTextField();
        durationLabel = new javax.swing.JLabel();
        btLoad = new javax.swing.JButton();
        loadField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(null);

        btImg.setAutoscrolls(true);
        btImg.setMaximumSize(null);
        btImg.setMinimumSize(null);
        btImg.setPreferredSize(null);

        javax.swing.GroupLayout webPanelLayout = new javax.swing.GroupLayout(webPanel);
        webPanel.setLayout(webPanelLayout);
        webPanelLayout.setHorizontalGroup(
            webPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        webPanelLayout.setVerticalGroup(
            webPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        videoPanel.setAlignmentX(0.0F);
        videoPanel.setAlignmentY(0.0F);

        btPlayVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/play.png"))); // NOI18N
        btPlayVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayVideoActionPerformed(evt);
            }
        });

        btPauseVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/pause.png"))); // NOI18N
        btPauseVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPauseVideoActionPerformed(evt);
            }
        });

        btStopVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/stop.png"))); // NOI18N
        btStopVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStopVideoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout videoPanelLayout = new javax.swing.GroupLayout(videoPanel);
        videoPanel.setLayout(videoPanelLayout);
        videoPanelLayout.setHorizontalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btPlayVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(videoPanelLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(btPauseVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btStopVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        videoPanelLayout.setVerticalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, videoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btPlayVideo)
                .addContainerGap())
            .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(videoPanelLayout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btPauseVideo)
                        .addComponent(btStopVideo))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btGoWeb.setText("go!");
        btGoWeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGoWebActionPerformed(evt);
            }
        });

        btPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/play.png"))); // NOI18N
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });

        btPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/pause.png"))); // NOI18N
        btPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPauseActionPerformed(evt);
            }
        });

        btStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/stop.png"))); // NOI18N
        btStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStopActionPerformed(evt);
            }
        });

        btMarker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rs/add.png"))); // NOI18N
        btMarker.setText("Add Marker");
        btMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMarkerActionPerformed(evt);
            }
        });

        audioProgress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                audioProgressMouseClicked(evt);
            }
        });

        fullDurationLabel.setText("teste");

        curDurationLabel.setText("teste");

        durationLabel.setText("Insert the marker duration (in seconds):");

        btLoad.setText("Load");
        btLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(webPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(audioProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(curDurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(durationField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileBrowser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btMarker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(fullDurationLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btGoWeb)
                        .addGap(93, 93, 93)
                        .addComponent(loadField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLoad)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 440, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(webPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btGoWeb)
                    .addComponent(btLoad)
                    .addComponent(loadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(audioProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(fileBrowser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(curDurationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fullDurationLabel)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btMarker, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btPlay, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btPause, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(btStop))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*public static void dbConnect(String user, String pass, String conn_string) throws ClassNotFoundException, SQLException
    {
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            System.out.println("Connected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
        
    }*/
    
    public void addMarkerToDb(String markerPath,int idPodcast, String fileType, int markerStart, int markerDuration)
    {
        // adicionar a tabela marker
        //idmarker, idpodcast, markerpath, type, start, duration
        Connection conn = null;
        System.out.println(markerPath);
        System.out.println(idPodcast);
        
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            //Statement st = (Statement) conn.createStatement(); 
            System.out.println("Connected");
            
            String SQL = "INSERT INTO marker (idpodcast,markerpath,type,start,duration) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(SQL);
            
            pstmt.setInt(1, idPodcast);
            pstmt.setString(2, markerPath);
            pstmt.setString(3, fileType);
            pstmt.setInt(4, markerStart);
            pstmt.setInt(5, markerDuration);
            
            
            pstmt.executeUpdate();
            pstmt.close();

            
            //st.executeUpdate(SQL);

            conn.close();
            System.out.println("Disconnected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
        
    }
    
    public void addPodcastToDb(String podcastPath) throws ClassNotFoundException
    {
        Connection conn = null;
        System.out.println(podcastPath);
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            //Statement st = (Statement) conn.createStatement(); 
            System.out.println("Connected");
            
            String SQL = "INSERT INTO podcast (pathpodcast) VALUES (?)";
            PreparedStatement pstmt = conn.prepareStatement(SQL);
            pstmt.setString(1, podcastPath);
            
            pstmt.executeUpdate();
            pstmt.close();

            
            //st.executeUpdate(SQL);

            conn.close();
            System.out.println("Disconnected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
  
    }
    
    public int getPodcastId ()
    {
        int idPodcast = 0;
        Connection conn = null;
        
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            
            Statement st = (Statement) conn.createStatement(); 
            System.out.println("Connected");
            
            String query = "Select idpodcast from podcast";

            ResultSet rs = st.executeQuery(query);
      
            // iterate through the java resultset
            while (rs.next())
            {
              idPodcast = rs.getInt("idpodcast");
  
              // print the results
              System.out.format("%s\n", idPodcast);
            }
            conn.close();
            System.out.println("Disconnected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
        return idPodcast;
    }
    
    public void loadPodcast(int idPodcast) throws UnsupportedAudioFileException
    {
        Connection conn = null;
        
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            
            Statement st = (Statement) conn.createStatement(); 
            System.out.println("Connected");
            
            String query = "select * from podcast natural join marker";

            ResultSet rs = st.executeQuery(query);
      
            // iterate through the java resultset
            while (rs.next())
            {
              if (idPodcast == rs.getInt("idpodcast"))
              {
                //setar audio podcast
                addAudioFromPath(rs.getString("pathpodcast"));

                //adicionar marcadores
                //setar marcador a partir do tipo startpoint e duração
                if (rs.getString("type").equals("mp4"))
                  {
                      //videoPath = filePath;
                      addVideo(filePath);
                  }


                if (rs.getString("type").equals("jpg") || rs.getString("type").equals("png"))
                {
                    //imgPath = filePath;
                    addImgFromPath(rs.getString("markerpath"));
                    startPoint = rs.getInt("start") * 1000 ;
                    markerDuration = rs.getInt("duration") ;

                }
                // startpoint e duração
                 
              }
  
              // print the results
              System.out.format("%s\n", idPodcast);
            }
            conn.close();
            System.out.println("Disconnected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
    }
    
    /*public final void deleteFromDb (int id){
        
        Connection conn = null;
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            Statement st = (Statement) conn.createStatement(); 
            
            System.out.println("Connected");
            st.executeUpdate("DELETE FROM podcast where idpodcast =" +id);

            conn.close();
            System.out.println("Disconnected");
            
        }catch (SQLException e){
            System.err.println(e);
        }
    }*/
    
    private void audioProgressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_audioProgressMouseClicked
        // TODO add your handling code here:

        //mouse position relative to the component origin
        int mouseX = evt.getX();

        //Computes how far along the mouse is relative to the component width then multiply it by the progress bar's maximum value
        curDuration = (int)Math.round(((double)mouseX / (double)audioProgress.getWidth()) * audioProgress.getMaximum());

        durLabel = String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60));
        curDurationLabel.setText(durLabel);
        audioProgress.setValue(curDuration);
        clip.setMicrosecondPosition(curDuration * 1000000);

        audioProgress.revalidate();
        curDurationLabel.revalidate();
    }//GEN-LAST:event_audioProgressMouseClicked

    
    
    private void loadJavaFXScene(){
      Platform.runLater(new Runnable() {
      @Override
      public void run() {

        isMarker = true;
        BorderPane borderPane = new BorderPane();
        webComponent = new WebView();
        url = urlField.getText();
        webComponent.getEngine().load(url);

        borderPane.setCenter(webComponent);
        Scene scene = new Scene(borderPane,450,450);
        javafxPanel.setScene(scene);

      }
    });
       
    }
    
    public void addAudioFromPath(String audioPath) throws UnsupportedAudioFileException 
    {
        try {
                File audioFile = new File(audioPath);
                fullDurationLabel.setVisible(true);
                curDurationLabel.setVisible(true);

                audioInputStream = AudioSystem.getAudioInputStream(audioFile);
                clip = AudioSystem.getClip();
                clip.open(audioInputStream);
                

                fullDuration = (int) (clip.getMicrosecondLength()/1000000);
                fullDurationLabel.setText(String.format("%d:%02d:%02d",  fullDuration / 3600, ( fullDuration % 3600) / 60, ( fullDuration % 60)));

                curDuration = (int) (clip.getMicrosecondPosition()/1000000);
                curDurationLabel.setText(String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60)));

                audioProgress.setMinimum(0);
                audioProgress.setMaximum(fullDuration);
                //String.format("%d:%02d:%02d", s / 3600, (s % 3600) / 60, (s % 60));

                //curTime = String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60));

                int delay = 100; //milliseconds
                ActionListener updateProgressBar = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {

                        curDuration = (int) (clip.getMicrosecondPosition()/1000000);
                        durLabel = String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60));
                        curDurationLabel.setText(durLabel);
                        audioProgress.setValue(curDuration);

                        audioProgress.revalidate();
                        curDurationLabel.revalidate();
                        //System.out.println("executei");
                    }
                };
                new Timer(delay, updateProgressBar).start();

            } catch (IOException | LineUnavailableException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    public void addAudioFromFile(File audioFile) throws UnsupportedAudioFileException 
    {
        try {
                
                fullDurationLabel.setVisible(true);
                curDurationLabel.setVisible(true);

                audioInputStream = AudioSystem.getAudioInputStream(audioFile);
                clip = AudioSystem.getClip();
                clip.open(audioInputStream);
                

                fullDuration = (int) (clip.getMicrosecondLength()/1000000);
                fullDurationLabel.setText(String.format("%d:%02d:%02d",  fullDuration / 3600, ( fullDuration % 3600) / 60, ( fullDuration % 60)));

                curDuration = (int) (clip.getMicrosecondPosition()/1000000);
                curDurationLabel.setText(String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60)));

                audioProgress.setMinimum(0);
                audioProgress.setMaximum(fullDuration);
                //String.format("%d:%02d:%02d", s / 3600, (s % 3600) / 60, (s % 60));

                //curTime = String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60));

                int delay = 100; //milliseconds
                ActionListener updateProgressBar = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {

                        curDuration = (int) (clip.getMicrosecondPosition()/1000000);
                        durLabel = String.format("%d:%02d:%02d",  curDuration / 3600, ( curDuration % 3600) / 60, ( curDuration % 60));
                        curDurationLabel.setText(durLabel);
                        audioProgress.setValue(curDuration);

                        audioProgress.revalidate();
                        curDurationLabel.revalidate();
                        //System.out.println("executei");
                    }
                };
                new Timer(delay, updateProgressBar).start();

            } catch (IOException | LineUnavailableException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    public void addImgFromPath (String imgPath)
    {
        try {
                
                File imgFile = new File(imgPath);
                BufferedImage bimg;
                bimg = ImageIO.read(imgFile);
                Image scaledImage = bimg.getScaledInstance(460, 460, Image.SCALE_SMOOTH);

                img = new ImageIcon(scaledImage);

                btImg.setBorder (new EmptyBorder(0,0,0,0));
                btImg.setOpaque(false);
                btImg.setIcon(img);
                btImg.setVisible(true);
                
                

            } catch (IOException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    public void addImgFromFile (File imgFile)
    {
        try {
                
                BufferedImage bimg;
                bimg = ImageIO.read(imgFile);
                Image scaledImage = bimg.getScaledInstance(460, 460, Image.SCALE_SMOOTH);

                img = new ImageIcon(scaledImage);

                btImg.setBorder (new EmptyBorder(0,0,0,0));
                btImg.setOpaque(false);
                btImg.setIcon(img);
                btImg.setVisible(true);
                
                

            } catch (IOException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    private void addVideo(String videoPath){
            final JFXPanel VFXPanel = new JFXPanel();

            File video_source = new File(videoPath);
            Media m = new Media(video_source.toURI().toString());
            player = new MediaPlayer(m);
            MediaView viewer = new MediaView(player);

            StackPane root = new StackPane();
            Scene scene = new Scene(root);

            viewer.setFitWidth(500);
            viewer.setFitHeight(500);
            viewer.setPreserveRatio(true);

            // add video to stackpane
            root.getChildren().add(viewer);

            VFXPanel.setScene(scene);
            
            videoPanel.setVisible(true);
            
            videoPanel.setLayout(new BorderLayout());
            videoPanel.add(VFXPanel, BorderLayout.CENTER);
            player.play();
    }
    


    private void btMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMarkerActionPerformed
        // TODO add your handling code here:


        fileBrowser.setVisible(true);
        
        File file = null;

        int returnVal = fileBrowser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            file = fileBrowser.getSelectedFile();
            filePath = file.getAbsolutePath();
        }else {
            System.out.println("File access cancelled by user.");
        }

        System.out.println(filePath);

        String type = filePath.substring(filePath.length() - 3);
        System.out.println(type);
        
        startPoint = curDuration;
        
        
        if(durationField.getText().equals("") || durationField.getText().equals("0") )
        {
            markerDuration = 0;
        }else
        {
            markerDuration = Integer.parseInt(durationField.getText()) * 1000;
        }
        System.out.println("marker start: " + startPoint);
        System.out.println("marker duration: " + markerDuration);
        
        
        if (type.equals("mp4"))
        {
            //videoPath = filePath;
            addVideo(filePath);
            

        }
        
        
        if (type.equals("jpg") || type.equals("png"))
        {
            //imgPath = filePath;
            addImgFromFile(file);
            addMarkerToDb(filePath,getPodcastId(),type,startPoint,markerDuration);


        }

        if (type.equals("wav"))
        {
            try {
                addAudioFromFile(file);
                addPodcastToDb(filePath);
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
               
    }//GEN-LAST:event_btMarkerActionPerformed
    

    private void btStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStopActionPerformed
        // TODO add your handling code here:
        clip.stop();
        clip.setMicrosecondPosition(0);
        isPlaying = false;
        System.out.print(isPlaying);
    }//GEN-LAST:event_btStopActionPerformed

    private void btPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPauseActionPerformed
        // TODO add your handling code here:
        clip.stop();
        isPlaying = false;
        System.out.print(isPlaying);
    }//GEN-LAST:event_btPauseActionPerformed

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
        // TODO add your handling code here:
        clip.start();
        isPlaying = true;
        System.out.print(isPlaying);
            // duração da imagem
        if (startPoint == curDuration) //arrumar
        {
            btImg.setVisible(true);
            if(isPlaying == true)
            {
               java.util.Timer timeImg = new java.util.Timer();

               timeImg.schedule(new java.util.TimerTask() {
                        @Override
                        public void run() {

                            btImg.setIcon(null);
                        }
                    }, markerDuration); 
            } 
        }else {
            btImg.setVisible(false);
        }
           
       
        
    }//GEN-LAST:event_btPlayActionPerformed

    private void btGoWebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGoWebActionPerformed
        // TODO add your handling code here:
        int startPoint = curDuration;
        int markerDuration = Integer.parseInt(durationField.getText());
        loadJavaFXScene();
    }//GEN-LAST:event_btGoWebActionPerformed

    private void btStopVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStopVideoActionPerformed
        // TODO add your handling code here:
        player.stop();
        //clip.setMicrosecondPosition(0);
    }//GEN-LAST:event_btStopVideoActionPerformed

    private void btPauseVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPauseVideoActionPerformed
        // TODO add your handling code here:
        player.pause();
    }//GEN-LAST:event_btPauseVideoActionPerformed

    private void btPlayVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayVideoActionPerformed
        // TODO add your handling code here:
        player.play();
    }//GEN-LAST:event_btPlayVideoActionPerformed

    private void btLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadActionPerformed
        // TODO add your handling code here:
        int podToLoad = Integer.parseInt(loadField.getText());
        try {
            loadPodcast(podToLoad);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btLoadActionPerformed
                                       
    

    


    /**
     * @param args the command line arguments
     */


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(atoomUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(atoomUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(atoomUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(atoomUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new atoomUI().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(atoomUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
            }
        });
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar audioProgress;
    private javax.swing.JButton btGoWeb;
    private javax.swing.JButton btImg;
    private javax.swing.JButton btLoad;
    private javax.swing.JButton btMarker;
    private javax.swing.JButton btPause;
    private javax.swing.JButton btPauseVideo;
    private javax.swing.JButton btPlay;
    private javax.swing.JButton btPlayVideo;
    private javax.swing.JButton btStop;
    private javax.swing.JButton btStopVideo;
    private javax.swing.JLabel curDurationLabel;
    private javax.swing.JTextField durationField;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JFileChooser fileBrowser;
    private javax.swing.JLabel fullDurationLabel;
    private javax.swing.JTextField loadField;
    private javax.swing.JTextField urlField;
    private javax.swing.JPanel videoPanel;
    private javax.swing.JPanel webPanel;
    // End of variables declaration//GEN-END:variables



    }

    

